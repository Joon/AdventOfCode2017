RISD Code       |   First Pass Translation |   Second Pass Translation
set b 81		|	b = 81                 |
set c b			|	c = b                  |    
				|						   |
				|						   | 
mul b 100		|	b = b * 100            |    
sub b -100000	|	b = b + 100000		   |   let b = 108100
set c b			|	c = b				   |	  
sub c -17000	|	c += 17000             |   let c = b + 17000
set f 1			|	f = 1                  |   DO let f = 1;
set d 2			|	d = 2                  |      let d = 2
set e 2			|	e = 2                  |      DO  let e = 2
set g d			|	g = d                  |      	 DO 
mul g e			|	g = g * e			   |		  	g = (d * e) - b
sub g b			|	g = g - b              |
jnz g 2			|	if (g <> 0) goto 18    |          	if (g == 0)
set f 0			|	f = 0                  |            	f = 0
sub e -1		|	e = e + 1			   |			e++
set g e			|	g = e                  |          	
sub g b			|	g = g - b              |          	g = e - b
jnz g -8		|	if (g <> 0) goto 13    |       	 UNTIL g == 0
sub d -1		|	d = d + 1	           |         d++;
set g d			|	g = d				   | 
sub g b			|	g = g - b              |         g = d - b
jnz g -13		|	if (g <> 0) goto 12    |      UNTIL g == 0
jnz f 2			|	if (f <> 0) goto 28    |      if (f == 0)
sub h -1		|	h = h + 1              |          h++
set g b			|	g = b                  |        
sub g c			|	g = g - c              |      g = b - c
jnz g 2			|	if (g <> 0) goto 32    |       
jnz 1 3			|	goto END               | 
sub b -17		|	b = b + 17			   |	  b = b + 17
jnz 1 -23		|	goto 11                |   UNTIL g == 0 			
                |                          |   return h

Translation Pass Three: 
			
let h = 0			
let b = 108100				
let c = b + 17000
for (let b = 108100; b <= c; b += 17){
   let f = 1;
   for (let d = 2; d <= b; d++) {
   	   for (let e = 2; e <= b; e++) { 
      	    if ((d * e) == b)
        	    f = 0
   	   }
   }
   if (f == 0)
       h++
}

return h

Translation Pass Four (with Optimization):

let notPrimeCount = 0;
let lowerBound = 108100;
let upperBound = lowerBound + 17000;
for (let numberToCheck = 108100; numberToCheck <= upperBound; numberToCheck += 17){
   let isNotPrime = false;
   for (let factor = 2; factor <= numberToCheck; factor++) {
   	   isNotPrime = (numberToCheck % factor) == 0;
	   if (isNotPrime) break;
   }
   if (isNotPrime)
       notPrimeCount++;
}

return notPrimeCount